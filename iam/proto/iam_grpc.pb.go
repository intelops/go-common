// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: iam/proto/iam.proto

package cmproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonModuleClient is the client API for CommonModule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonModuleClient interface {
	RegisterActions(ctx context.Context, in *RegisterActionsRequest, opts ...grpc.CallOption) (*RegisterActionsResponse, error)
	RegisterRoles(ctx context.Context, in *RegisterRolesRequest, opts ...grpc.CallOption) (*RegisterRolesResponse, error)
	FetchServiceByName(ctx context.Context, in *FetchServiceByNameRequest, opts ...grpc.CallOption) (*FetchServiceByNameResponse, error)
	UpdateServiceVersion(ctx context.Context, in *UpdateServiceVersionRequest, opts ...grpc.CallOption) (*UpdateServiceVersionResponse, error)
}

type commonModuleClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonModuleClient(cc grpc.ClientConnInterface) CommonModuleClient {
	return &commonModuleClient{cc}
}

func (c *commonModuleClient) RegisterActions(ctx context.Context, in *RegisterActionsRequest, opts ...grpc.CallOption) (*RegisterActionsResponse, error) {
	out := new(RegisterActionsResponse)
	err := c.cc.Invoke(ctx, "/CmService.CommonModule/RegisterActions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonModuleClient) RegisterRoles(ctx context.Context, in *RegisterRolesRequest, opts ...grpc.CallOption) (*RegisterRolesResponse, error) {
	out := new(RegisterRolesResponse)
	err := c.cc.Invoke(ctx, "/CmService.CommonModule/RegisterRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonModuleClient) FetchServiceByName(ctx context.Context, in *FetchServiceByNameRequest, opts ...grpc.CallOption) (*FetchServiceByNameResponse, error) {
	out := new(FetchServiceByNameResponse)
	err := c.cc.Invoke(ctx, "/CmService.CommonModule/FetchServiceByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonModuleClient) UpdateServiceVersion(ctx context.Context, in *UpdateServiceVersionRequest, opts ...grpc.CallOption) (*UpdateServiceVersionResponse, error) {
	out := new(UpdateServiceVersionResponse)
	err := c.cc.Invoke(ctx, "/CmService.CommonModule/UpdateServiceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonModuleServer is the server API for CommonModule service.
// All implementations must embed UnimplementedCommonModuleServer
// for forward compatibility
type CommonModuleServer interface {
	RegisterActions(context.Context, *RegisterActionsRequest) (*RegisterActionsResponse, error)
	RegisterRoles(context.Context, *RegisterRolesRequest) (*RegisterRolesResponse, error)
	FetchServiceByName(context.Context, *FetchServiceByNameRequest) (*FetchServiceByNameResponse, error)
	UpdateServiceVersion(context.Context, *UpdateServiceVersionRequest) (*UpdateServiceVersionResponse, error)
	mustEmbedUnimplementedCommonModuleServer()
}

// UnimplementedCommonModuleServer must be embedded to have forward compatible implementations.
type UnimplementedCommonModuleServer struct {
}

func (UnimplementedCommonModuleServer) RegisterActions(context.Context, *RegisterActionsRequest) (*RegisterActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterActions not implemented")
}
func (UnimplementedCommonModuleServer) RegisterRoles(context.Context, *RegisterRolesRequest) (*RegisterRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRoles not implemented")
}
func (UnimplementedCommonModuleServer) FetchServiceByName(context.Context, *FetchServiceByNameRequest) (*FetchServiceByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchServiceByName not implemented")
}
func (UnimplementedCommonModuleServer) UpdateServiceVersion(context.Context, *UpdateServiceVersionRequest) (*UpdateServiceVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceVersion not implemented")
}
func (UnimplementedCommonModuleServer) mustEmbedUnimplementedCommonModuleServer() {}

// UnsafeCommonModuleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonModuleServer will
// result in compilation errors.
type UnsafeCommonModuleServer interface {
	mustEmbedUnimplementedCommonModuleServer()
}

func RegisterCommonModuleServer(s grpc.ServiceRegistrar, srv CommonModuleServer) {
	s.RegisterService(&CommonModule_ServiceDesc, srv)
}

func _CommonModule_RegisterActions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonModuleServer).RegisterActions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CmService.CommonModule/RegisterActions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonModuleServer).RegisterActions(ctx, req.(*RegisterActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonModule_RegisterRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonModuleServer).RegisterRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CmService.CommonModule/RegisterRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonModuleServer).RegisterRoles(ctx, req.(*RegisterRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonModule_FetchServiceByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchServiceByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonModuleServer).FetchServiceByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CmService.CommonModule/FetchServiceByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonModuleServer).FetchServiceByName(ctx, req.(*FetchServiceByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonModule_UpdateServiceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonModuleServer).UpdateServiceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CmService.CommonModule/UpdateServiceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonModuleServer).UpdateServiceVersion(ctx, req.(*UpdateServiceVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonModule_ServiceDesc is the grpc.ServiceDesc for CommonModule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonModule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CmService.CommonModule",
	HandlerType: (*CommonModuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterActions",
			Handler:    _CommonModule_RegisterActions_Handler,
		},
		{
			MethodName: "RegisterRoles",
			Handler:    _CommonModule_RegisterRoles_Handler,
		},
		{
			MethodName: "FetchServiceByName",
			Handler:    _CommonModule_FetchServiceByName_Handler,
		},
		{
			MethodName: "UpdateServiceVersion",
			Handler:    _CommonModule_UpdateServiceVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iam/proto/iam.proto",
}
