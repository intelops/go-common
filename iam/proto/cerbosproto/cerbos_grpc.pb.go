// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/cerbospolicyproto/cerbos.proto

package cerbospolicyproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CerbosModuleServiceClient is the client API for CerbosModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CerbosModuleServiceClient interface {
	AddOrUpdateResourcePolicy(ctx context.Context, in *AddOrUpdateResourcePolicyRequest, opts ...grpc.CallOption) (*AddOrUpdateResourcePolicyResponse, error)
	DisablePolicy(ctx context.Context, in *DisablePolicyRequest, opts ...grpc.CallOption) (*DisablePolicyResponse, error)
	ListResourcePolicies(ctx context.Context, in *ListResourcePoliciesRequest, opts ...grpc.CallOption) (*ListResourcePoliciesResponse, error)
}

type cerbosModuleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCerbosModuleServiceClient(cc grpc.ClientConnInterface) CerbosModuleServiceClient {
	return &cerbosModuleServiceClient{cc}
}

func (c *cerbosModuleServiceClient) AddOrUpdateResourcePolicy(ctx context.Context, in *AddOrUpdateResourcePolicyRequest, opts ...grpc.CallOption) (*AddOrUpdateResourcePolicyResponse, error) {
	out := new(AddOrUpdateResourcePolicyResponse)
	err := c.cc.Invoke(ctx, "/CerbosPolicyService.CerbosModuleService/AddOrUpdateResourcePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerbosModuleServiceClient) DisablePolicy(ctx context.Context, in *DisablePolicyRequest, opts ...grpc.CallOption) (*DisablePolicyResponse, error) {
	out := new(DisablePolicyResponse)
	err := c.cc.Invoke(ctx, "/CerbosPolicyService.CerbosModuleService/DisablePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cerbosModuleServiceClient) ListResourcePolicies(ctx context.Context, in *ListResourcePoliciesRequest, opts ...grpc.CallOption) (*ListResourcePoliciesResponse, error) {
	out := new(ListResourcePoliciesResponse)
	err := c.cc.Invoke(ctx, "/CerbosPolicyService.CerbosModuleService/ListResourcePolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CerbosModuleServiceServer is the server API for CerbosModuleService service.
// All implementations must embed UnimplementedCerbosModuleServiceServer
// for forward compatibility
type CerbosModuleServiceServer interface {
	AddOrUpdateResourcePolicy(context.Context, *AddOrUpdateResourcePolicyRequest) (*AddOrUpdateResourcePolicyResponse, error)
	DisablePolicy(context.Context, *DisablePolicyRequest) (*DisablePolicyResponse, error)
	ListResourcePolicies(context.Context, *ListResourcePoliciesRequest) (*ListResourcePoliciesResponse, error)
	mustEmbedUnimplementedCerbosModuleServiceServer()
}

// UnimplementedCerbosModuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCerbosModuleServiceServer struct {
}

func (UnimplementedCerbosModuleServiceServer) AddOrUpdateResourcePolicy(context.Context, *AddOrUpdateResourcePolicyRequest) (*AddOrUpdateResourcePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdateResourcePolicy not implemented")
}
func (UnimplementedCerbosModuleServiceServer) DisablePolicy(context.Context, *DisablePolicyRequest) (*DisablePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisablePolicy not implemented")
}
func (UnimplementedCerbosModuleServiceServer) ListResourcePolicies(context.Context, *ListResourcePoliciesRequest) (*ListResourcePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourcePolicies not implemented")
}
func (UnimplementedCerbosModuleServiceServer) mustEmbedUnimplementedCerbosModuleServiceServer() {}

// UnsafeCerbosModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CerbosModuleServiceServer will
// result in compilation errors.
type UnsafeCerbosModuleServiceServer interface {
	mustEmbedUnimplementedCerbosModuleServiceServer()
}

func RegisterCerbosModuleServiceServer(s grpc.ServiceRegistrar, srv CerbosModuleServiceServer) {
	s.RegisterService(&CerbosModuleService_ServiceDesc, srv)
}

func _CerbosModuleService_AddOrUpdateResourcePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateResourcePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerbosModuleServiceServer).AddOrUpdateResourcePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CerbosPolicyService.CerbosModuleService/AddOrUpdateResourcePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerbosModuleServiceServer).AddOrUpdateResourcePolicy(ctx, req.(*AddOrUpdateResourcePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerbosModuleService_DisablePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisablePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerbosModuleServiceServer).DisablePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CerbosPolicyService.CerbosModuleService/DisablePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerbosModuleServiceServer).DisablePolicy(ctx, req.(*DisablePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CerbosModuleService_ListResourcePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerbosModuleServiceServer).ListResourcePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CerbosPolicyService.CerbosModuleService/ListResourcePolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerbosModuleServiceServer).ListResourcePolicies(ctx, req.(*ListResourcePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CerbosModuleService_ServiceDesc is the grpc.ServiceDesc for CerbosModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CerbosModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CerbosPolicyService.CerbosModuleService",
	HandlerType: (*CerbosModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddOrUpdateResourcePolicy",
			Handler:    _CerbosModuleService_AddOrUpdateResourcePolicy_Handler,
		},
		{
			MethodName: "DisablePolicy",
			Handler:    _CerbosModuleService_DisablePolicy_Handler,
		},
		{
			MethodName: "ListResourcePolicies",
			Handler:    _CerbosModuleService_ListResourcePolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cerbospolicyproto/cerbos.proto",
}
