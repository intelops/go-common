// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: interceptor.proto

package commoninterceptorproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonInterceptorServiceClient is the client API for CommonInterceptorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonInterceptorServiceClient interface {
	GetActionsWithOryidOrgid(ctx context.Context, in *GetActionsPayload, opts ...grpc.CallOption) (*GetActionsResponse, error)
}

type commonInterceptorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonInterceptorServiceClient(cc grpc.ClientConnInterface) CommonInterceptorServiceClient {
	return &commonInterceptorServiceClient{cc}
}

func (c *commonInterceptorServiceClient) GetActionsWithOryidOrgid(ctx context.Context, in *GetActionsPayload, opts ...grpc.CallOption) (*GetActionsResponse, error) {
	out := new(GetActionsResponse)
	err := c.cc.Invoke(ctx, "/InterceptorService.CommonInterceptorService/GetActionsWithOryidOrgid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonInterceptorServiceServer is the server API for CommonInterceptorService service.
// All implementations must embed UnimplementedCommonInterceptorServiceServer
// for forward compatibility
type CommonInterceptorServiceServer interface {
	GetActionsWithOryidOrgid(context.Context, *GetActionsPayload) (*GetActionsResponse, error)
	mustEmbedUnimplementedCommonInterceptorServiceServer()
}

// UnimplementedCommonInterceptorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommonInterceptorServiceServer struct {
}

func (UnimplementedCommonInterceptorServiceServer) GetActionsWithOryidOrgid(context.Context, *GetActionsPayload) (*GetActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionsWithOryidOrgid not implemented")
}
func (UnimplementedCommonInterceptorServiceServer) mustEmbedUnimplementedCommonInterceptorServiceServer() {
}

// UnsafeCommonInterceptorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonInterceptorServiceServer will
// result in compilation errors.
type UnsafeCommonInterceptorServiceServer interface {
	mustEmbedUnimplementedCommonInterceptorServiceServer()
}

func RegisterCommonInterceptorServiceServer(s grpc.ServiceRegistrar, srv CommonInterceptorServiceServer) {
	s.RegisterService(&CommonInterceptorService_ServiceDesc, srv)
}

func _CommonInterceptorService_GetActionsWithOryidOrgid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionsPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonInterceptorServiceServer).GetActionsWithOryidOrgid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InterceptorService.CommonInterceptorService/GetActionsWithOryidOrgid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonInterceptorServiceServer).GetActionsWithOryidOrgid(ctx, req.(*GetActionsPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonInterceptorService_ServiceDesc is the grpc.ServiceDesc for CommonInterceptorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonInterceptorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InterceptorService.CommonInterceptorService",
	HandlerType: (*CommonInterceptorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActionsWithOryidOrgid",
			Handler:    _CommonInterceptorService_GetActionsWithOryidOrgid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interceptor.proto",
}
